import tensorflow as tf
import tensorflow_hub as hub
import os
from keras.models import Sequential
from tensorflow.keras.layers import Dense
from tensorflow.keras.layers import Flatten
from tensorflow.keras.layers import Conv2D
from tensorflow.keras.layers import Dropout
from tensorflow.keras import Model
from tensorflow.keras.preprocessing.image import 
ImageDataGenerator
from tensorflow.keras.optimizers import Adam
from tensorflow.keras import layers
train_dir='/content/drive/MyDrive/Buffml/code/Training/Dataset'
Labels = ['Benign', 'Malignant']
print ("class : ") 
for i in range(len(Labels)): 
 print (i, end = " ") 
 print (Labels[i])
print('Number of classes:',len(Labels))
module_selection = ("mobilenet_v2", 224, 1280) 
handle_base, pixels, FV_SIZE = module_selection
MODULE_HANDLE ="https://tfhub.dev/google/tf2-
preview/{}/feature_vector/2".format(handle_base)
IMAGE_SIZE = (pixels, pixels)
BATCH_SIZE = 16 
train_datagen = tf.keras.preprocessing.image.ImageDataGenerator(
 rescale = 1./255,
 rotation_range=40,
 horizontal_flip=True,
24
 width_shift_range=0.2, 
 height_shift_range=0.2,
 shear_range=0.2, 
 zoom_range=0.2,
 fill_mode='nearest',
 validation_split=0.3)
 
train_generator = train_datagen.flow_from_directory(
 train_dir, 
 subset="training", 
 shuffle=True, 
 seed=42,
 color_mode="rgb", 
 class_mode="categorical",
 target_size=IMAGE_SIZE,
 batch_size=BATCH_SIZE)
validation_generator = train_datagen.flow_from_directory(
 train_dir, 
 shuffle=False, 
 seed=42,
 color_mode="rgb", 
 class_mode="categorical",
 subset="validation",
 target_size=IMAGE_SIZE,
 batch_size=BATCH_SIZE)
feature_extractor = 
hub.KerasLayer(MODULE_HANDLE,input_shape=IMAGE_SIZE+
(3,), output_shape=[FV_SIZE])
do_fine_tuning = False 
if do_fine_tuning:
 feature_extractor.trainable = True
 for layer in base_model.layers[-30:]:
 layer.trainable =True
 
else:
25
 feature_extractor.trainable = False
print("Building model with", MODULE_HANDLE)
model = tf.keras.Sequential([
 feature_extractor,
 tf.keras.layers.Flatten(),
 tf.keras.layers.Dense(512, activation='relu'),
 tf.keras.layers.Dropout(rate=0.2),
 tf.keras.layers.Dense(train_generator.num_classes, 
activation='softmax',
 kernel_regularizer=tf.keras.regularizers.l2(0.0001))
])
model.summary()
LEARNING_RATE = 0.001 
model.compile(
 
optimizer=tf.keras.optimizers.Adam(learning_rate=LEARNING_RA
TE), 
 loss='categorical_crossentropy',
 metrics=['accuracy'])
EPOCHS=15
history = model.fit(
 train_generator,
 
steps_per_epoch=train_generator.samples//train_generator.batch_size
,
 epochs=EPOCHS,
 validation_data=validation_generator,
 
validation_steps=validation_generator.samples//validation_generator.
batch_size)
import matplotlib.pylab as plt
import numpy as np
26
acc = history.history['accuracy']
val_acc = history.history['val_accuracy']
loss = history.history['loss']
val_loss = history.history['val_loss']
epochs_range = range(EPOCHS)
plt.figure(figsize=(10, 4))
plt.subplot(1, 2, 1)
plt.plot(epochs_range, acc, label='Training Accuracy')
plt.plot(epochs_range, val_acc, label='Validation Accuracy')
plt.legend(loc='lower right')
plt.title('Training and Validation Accuracy')
plt.ylabel("Accuracy (training and validation)")
plt.xlabel("Training Steps")
plt.subplot(1, 2, 2)
plt.plot(epochs_range, loss, label='Training Loss')
plt.plot(epochs_range, val_loss, label='Validation Loss')
plt.legend(loc='upper right')
plt.title('Training and Validation Loss')
plt.ylabel("Loss (training and validation)")
plt.xlabel("Training Steps")
plt.show()
import random
import cv2
def upload(filename):
 img = cv2.imread(os.path.join(train_dir, filename))
 img = cv2.resize(img, (224, 224) )
 img = img /255
 return img
def pre_result(image):
 x = model.predict(np.asarray([img]))[0]
27
 classx = np.argmax(x)
 return {Labels[classx]: x[classx]}
images = random.sample(validation_generator.filenames, 16)
for idx, filename in enumerate(images):
 img = upload(filename)
 prediction = pre_result(img)
 print("class: %s, confidence: %f" % (list(prediction.keys())[0], 
list(prediction.values())[0]))
 plt.imshow(img)
 plt.figure(idx) 
 plt.show()
import pandas as pd
import numpy as np
import seaborn as sn
print('Confusion Matrix')
cm = confusion_matrix(validation_generator.classes, y)
df = pd.DataFrame(cm, columns=validation_generator.class_indices)
plt.figure(figsize=(10,7))
sn.heatmap(df, annot=True